{"version":3,"sources":["ng-frontier.min.js","ng-frontier.factory.js","ng-frontier.directive.js"],"names":["angular","module","factory","$q","$window","Initialize","params","isUndefined","console","info","isObject","accounts","accessCode","trackerName","encoding","userId","Frontier","debugMode","isEnable","enableAppDebugging","allowPageTracking","enableTrackPage","allowEventTracking","enableTrackEvent","allowViewTracking","enableTrackView","allowAppTracking","enableTrackApp","allowDeviceTracking","enableTrackDevice","setUserId","d","defer","response","resolve","error","reject","promise","trackView","screenName","screenTrack","trackEvent","category","action","label","value","eventTrack","eventCategory","eventAction","eventLabel","eventValue","trackPage","title","location","page","pageTrack","trackApp","appName","appID","appVersion","appInstallerID","appTrack","trackDevice","deviceID","deviceName","deviceBrand","deviceModel","osName","osVersion","screenResolution","serviceProvider","deviceTrack","directive","$frontierAnalytics","$parse","restrict","link","scope","element","attrs","options","faTrackEvent","bind","faTrackEventIf","$eval","length","apply","faTrackPage","faTrackPageIf","faTrackView","faTrackViewIf","faTrackApp","faTrackAppIf","faTrackDevice","faTrackDeviceIf"],"mappings":"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","file":"ng-frontier.min.js","sourcesContent":["/*!\n * ngFrontier\n * v1.0.0\n * @link https://bitbucket.org/fourloopph/4loop-sdks * Copyright 2016 4LOOP. http://4loop.ph/\n * See LICENSE in this repository for license information\n */\n\n(function(){\n\n 'use strict'\n\n    angular.module('ngFrontier', [])\n        .factory('$frontierAnalytics', ['$q', '$window', function($q, $window) {\n\n            return {\n                Initialize: function(params) {\n                    if (angular.isUndefined(params) || params === false) {\n                        console.info('Unable to initialize ngFrontier. Invalid parameter values!');\n                        return;\n                    } else if (angular.isObject(params)) {\n\n                        var accounts = {\n                            accessCode: params.accessCode,\n                            trackerName: params.trackerName,\n                            encoding: params.encoding,\n                            userId: params.userId\n                        };\n\n                        $window.Frontier.Initialize(accounts);\n                    }\n                },\n\n                debugMode: function(isEnable) {\n                    $window.Frontier.enableAppDebugging(isEnable);\n                },\n\n                allowPageTracking : function(isEnable){\n                    $window.Frontier.enableTrackPage(isEnable);\n                },\n\n                allowEventTracking: function(isEnable){\n                  $window.Frontier.enableTrackEvent(isEnable);\n                },\n\n                allowViewTracking: function(isEnable){\n                    $window.Frontier.enableTrackView(isEnable);\n                },\n\n                allowAppTracking: function(isEnable){\n                    $window.Frontier.enableTrackApp(isEnable);\n                },\n\n                allowDeviceTracking: function(isEnable){\n                    $window.Frontier.enableTrackDevice(isEnable);\n                },\n\n                setUserId: function(userId) {\n                    var d = $q.defer();\n\n                    $window.Frontier.setUserId({\n                        userId: userId\n                    }, function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                },\n\n                trackView: function(screenName) {\n                    var d = $q.defer();\n\n                    $window.Frontier.screenTrack({\n                        screenName: screenName\n                    }, function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                },\n\n                trackEvent: function(category, action, label, value) {\n                    var d = $q.defer();\n\n                    $window.Frontier.eventTrack({\n                        eventCategory: category,\n                        eventAction: action,\n                        eventLabel: label,\n                        eventValue: value\n                    },function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                },\n\n                trackPage: function(title, location, page) {\n                    var d = $q.defer();\n\n                    $window.Frontier.pageTrack({\n                        title: title,\n                        location: location,\n                        page: page\n                    }, function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                },\n\n                trackApp: function(appName, appID, appVersion, appInstallerID) {\n                    var d = $q.defer();\n\n                    $window.Frontier.appTrack({\n                        appName: appName,\n                        appID: appID,\n                        appVersion: appVersion,\n                        appInstallerID: appInstallerID\n                    }, function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                },\n\n                trackDevice: function(deviceID, deviceName, deviceBrand, deviceModel, osName, osVersion, screenResolution, serviceProvider) {\n                    var d = $q.defer();\n\n                    $window.Frontier.deviceTrack({\n                        deviceID: deviceID,\n                        deviceName: deviceName,\n                        deviceBrand: deviceBrand,\n                        deviceModel: deviceModel,\n                        osName: osName,\n                        osVersion: osVersion,\n                        screenResolution: screenResolution,\n                        serviceProvider: serviceProvider\n                    }, function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                }\n            };\n        }])\n\n        .directive('faTrackEvent', ['$frontierAnalytics','$parse', function($frontierAnalytics,$parse) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackEvent);\n                    element.bind('click', function() {\n                        if (attrs.faTrackEventIf) {\n                            if (!scope.$eval(attrs.faTrackEventIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-event-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackEvent.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }])\n        .directive('faTrackPage', ['$frontierAnalytics','$parse', function($frontierAnalytics,$parse) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackPage);\n                    element.bind('click', function() {\n\n                        if (attrs.faTrackPageIf) {\n                            if (!scope.$eval(attrs.faTrackPageIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-page-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackPage.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }])\n        .directive('faTrackView', ['$frontierAnalytics','$parse', function($frontierAnalytics,$parse) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackView);\n                    element.bind('click', function() {\n\n                        if (attrs.faTrackViewIf) {\n                            if (!scope.$eval(attrs.faTrackViewIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-view-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackView.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }])\n        .directive('faTrackApp', ['$frontierAnalytics', function($frontierAnalytics) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackApp);\n                    element.bind('click', function() {\n\n                        if (attrs.faTrackAppIf) {\n                            if (!scope.$eval(attrs.faTrackAppIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-app-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackApp.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }])\n        .directive('faTrackDevice', ['$frontierAnalytics','$parse', function($frontierAnalytics,$parse) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackDevice);\n                    element.bind('click', function() {\n\n                        if (attrs.faTrackDeviceIf) {\n                            if (!scope.$eval(attrs.faTrackDeviceIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-device-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackDevice.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }]);\n\n })();","    angular.module('ngFrontier', [])\n        .factory('$frontierAnalytics', ['$q', '$window', function($q, $window) {\n\n            return {\n                Initialize: function(params) {\n                    if (angular.isUndefined(params) || params === false) {\n                        console.info('Unable to initialize ngFrontier. Invalid parameter values!');\n                        return;\n                    } else if (angular.isObject(params)) {\n\n                        var accounts = {\n                            accessCode: params.accessCode,\n                            trackerName: params.trackerName,\n                            encoding: params.encoding,\n                            userId: params.userId\n                        };\n\n                        $window.Frontier.Initialize(accounts);\n                    }\n                },\n\n                debugMode: function(isEnable) {\n                    $window.Frontier.enableAppDebugging(isEnable);\n                },\n\n                allowPageTracking : function(isEnable){\n                    $window.Frontier.enableTrackPage(isEnable);\n                },\n\n                allowEventTracking: function(isEnable){\n                  $window.Frontier.enableTrackEvent(isEnable);\n                },\n\n                allowViewTracking: function(isEnable){\n                    $window.Frontier.enableTrackView(isEnable);\n                },\n\n                allowAppTracking: function(isEnable){\n                    $window.Frontier.enableTrackApp(isEnable);\n                },\n\n                allowDeviceTracking: function(isEnable){\n                    $window.Frontier.enableTrackDevice(isEnable);\n                },\n\n                setUserId: function(userId) {\n                    var d = $q.defer();\n\n                    $window.Frontier.setUserId({\n                        userId: userId\n                    }, function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                },\n\n                trackView: function(screenName) {\n                    var d = $q.defer();\n\n                    $window.Frontier.screenTrack({\n                        screenName: screenName\n                    }, function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                },\n\n                trackEvent: function(category, action, label, value) {\n                    var d = $q.defer();\n\n                    $window.Frontier.eventTrack({\n                        eventCategory: category,\n                        eventAction: action,\n                        eventLabel: label,\n                        eventValue: value\n                    },function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                },\n\n                trackPage: function(title, location, page) {\n                    var d = $q.defer();\n\n                    $window.Frontier.pageTrack({\n                        title: title,\n                        location: location,\n                        page: page\n                    }, function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                },\n\n                trackApp: function(appName, appID, appVersion, appInstallerID) {\n                    var d = $q.defer();\n\n                    $window.Frontier.appTrack({\n                        appName: appName,\n                        appID: appID,\n                        appVersion: appVersion,\n                        appInstallerID: appInstallerID\n                    }, function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                },\n\n                trackDevice: function(deviceID, deviceName, deviceBrand, deviceModel, osName, osVersion, screenResolution, serviceProvider) {\n                    var d = $q.defer();\n\n                    $window.Frontier.deviceTrack({\n                        deviceID: deviceID,\n                        deviceName: deviceName,\n                        deviceBrand: deviceBrand,\n                        deviceModel: deviceModel,\n                        osName: osName,\n                        osVersion: osVersion,\n                        screenResolution: screenResolution,\n                        serviceProvider: serviceProvider\n                    }, function(response) {\n                        d.resolve(response);\n                    }, function(error) {\n                        d.reject(error);\n                    });\n\n                    return d.promise;\n                }\n            };\n        }])\n","        .directive('faTrackEvent', ['$frontierAnalytics','$parse', function($frontierAnalytics,$parse) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackEvent);\n                    element.bind('click', function() {\n                        if (attrs.faTrackEventIf) {\n                            if (!scope.$eval(attrs.faTrackEventIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-event-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackEvent.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }])\n        .directive('faTrackPage', ['$frontierAnalytics','$parse', function($frontierAnalytics,$parse) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackPage);\n                    element.bind('click', function() {\n\n                        if (attrs.faTrackPageIf) {\n                            if (!scope.$eval(attrs.faTrackPageIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-page-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackPage.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }])\n        .directive('faTrackView', ['$frontierAnalytics','$parse', function($frontierAnalytics,$parse) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackView);\n                    element.bind('click', function() {\n\n                        if (attrs.faTrackViewIf) {\n                            if (!scope.$eval(attrs.faTrackViewIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-view-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackView.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }])\n        .directive('faTrackApp', ['$frontierAnalytics', function($frontierAnalytics) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackApp);\n                    element.bind('click', function() {\n\n                        if (attrs.faTrackAppIf) {\n                            if (!scope.$eval(attrs.faTrackAppIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-app-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackApp.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }])\n        .directive('faTrackDevice', ['$frontierAnalytics','$parse', function($frontierAnalytics,$parse) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackDevice);\n                    element.bind('click', function() {\n\n                        if (attrs.faTrackDeviceIf) {\n                            if (!scope.$eval(attrs.faTrackDeviceIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-device-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackDevice.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }]);\n"],"sourceRoot":"/source/"}