{"version":3,"sources":["ng-frontier.factory.js","ng-frontier.directive.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ng-frontier.js","sourcesContent":["    angular.module('ngFrontier', [])\n        .factory('$frontierAnalytics', ['$q', '$window', function($q, $window) {\n\n            return {\n                Initialize: function(params) {\n                    if (angular.isUndefined(params) || params === false) {\n                        console.info('Unable to initialize ngFrontier. Invalid parameter values!');\n                        return;\n                    } else if (angular.isObject(params)) {\n\n                        var accounts = {\n                            accessCode: params.accessCode,\n                            trackerName: params.trackerName,\n                            encoding: params.encoding,\n                            userId: params.userId\n                        };\n\n                        return $window.Frontier.Initialize(accounts);\n                    }\n                },\n\n                debugMode: function(isEnable) {\n                    return $window.Frontier.enableAppDebugging(isEnable);\n                },\n\n                allowPageTracking : function(isEnable){\n                    return $window.Frontier.enableTrackPage(isEnable);\n                },\n\n                allowEventTracking: function(isEnable){\n                    return $window.Frontier.enableTrackEvent(isEnable);\n                },\n\n                allowViewTracking: function(isEnable){\n                    return $window.Frontier.enableTrackView(isEnable);\n                },\n\n                allowAppTracking: function(isEnable){\n                    return $window.Frontier.enableTrackApp(isEnable);\n                },\n\n                allowDeviceTracking: function(isEnable){\n                    return $window.Frontier.enableTrackDevice(isEnable);\n                },\n\n                setUserId: function(userId) {\n                    return $window.Frontier.setUserId(userId);\n                },\n\n                trackView: function(screenName) {\n                    return $window.Frontier.screenTrack({\n                        screenName: screenName\n                    });\n                },\n\n                trackEvent: function(category, action, label, value) {\n                    return $window.Frontier.eventTrack({\n                        eventCategory: category,\n                        eventAction: action,\n                        eventLabel: label,\n                        eventValue: value\n                    });\n                },\n\n                trackPage: function(title, location, page) {\n                    return $window.Frontier.pageTrack({\n                        title: title,\n                        location: location,\n                        page: page\n                    });\n                },\n\n                trackApp: function(appName, appID, appVersion, appInstallerID) {\n                    return $window.Frontier.appTrack({\n                        appName: appName,\n                        appID: appID,\n                        appVersion: appVersion,\n                        appInstallerID: appInstallerID\n                    });\n                },\n\n                trackDevice: function(deviceID, deviceName, deviceBrand, deviceModel, osName, osVersion, screenResolution, serviceProvider) {\n                    return $window.Frontier.deviceTrack({\n                        deviceID: deviceID,\n                        deviceName: deviceName,\n                        deviceBrand: deviceBrand,\n                        deviceModel: deviceModel,\n                        osName: osName,\n                        osVersion: osVersion,\n                        screenResolution: screenResolution,\n                        serviceProvider: serviceProvider\n                    });\n                }\n            };\n        }])\n","        .directive('faTrackEvent', ['$frontierAnalytics','$parse', function($frontierAnalytics,$parse) {\n            return {\n                restrict: 'A',\n                link: function(scope, element, attrs) {\n                    var options = $parse(attrs.faTrackEvent);\n                    element.bind('click', function() {\n                        if (attrs.faTrackEventIf) {\n                            if (!scope.$eval(attrs.faTrackEventIf)) {\n                                return; // Cancel this event if we don't pass the fa-track-event-if condition\n                            }\n                        }\n                        if (options.length > 1) {\n                            $frontierAnalytics.trackEvent.apply($frontierAnalytics, options(scope));\n                        }\n                    });\n                }\n            }\n        }]);\n"],"sourceRoot":"/source/"}